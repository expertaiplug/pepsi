<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PACE Enrollment Pipeline Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Password Screen */
        .password-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .password-container {
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
            text-align: center;
            max-width: 400px;
            width: 90%;
        }

        .password-container h2 {
            color: #1e293b;
            margin-bottom: 20px;
            font-size: 1.8rem;
        }

        .password-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1.2rem;
            text-align: center;
            margin-bottom: 20px;
            font-weight: 600;
            letter-spacing: 2px;
        }

        .password-btn {
            width: 100%;
            padding: 15px;
            background: #3b82f6;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .password-btn:hover {
            background: #2563eb;
        }

        .password-error {
            color: #dc2626;
            margin-top: 15px;
            font-weight: 500;
        }

        .main-content {
            display: none;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            text-align: center;
            position: relative;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .status-indicator {
            position: absolute;
            top: 20px;
            left: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .traffic-light {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.3);
            animation: pulse 2s infinite;
        }

        .traffic-light.green {
            background: #10b981;
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
        }

        .traffic-light.yellow {
            background: #f59e0b;
            box-shadow: 0 0 10px rgba(2, 158, 11, 0.5);
        }

        .traffic-light.red {
            background: #ef4444;
            box-shadow: 0 0 10px rgba(9, 68, 68, 0.5);
        }

        .status-text {
            color: white;
            font-weight: 600;
            font-size: 0.9rem;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .tabs {
            display: flex;
            background: white;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .tab {
            flex: 1;
            padding: 12px 8px;
            text-align: center;
            background: #f1f5f9;
            border: none;
            cursor: pointer;
            font-weight: 600;
            color: #64748b;
            transition: all 0.3s ease;
            border-right: 1px solid #e2e8f0;
            font-size: 0.85rem;
        }

        .tab:last-child {
            border-right: none;
        }

        .tab.active {
            background: #3b82f6;
            color: white;
        }

        .tab:hover:not(.active) {
            background: #e2e8f0;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Card System */
        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            margin-bottom: 20px;
            color: #1e293b;
            font-size: 1.3rem;
        }

        /* Puzzle Visual */
        .puzzle-container {
            text-align: center;
        }

        .puzzle-grid {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            gap: 2px;
            max-width: 300px;
            margin: 20px auto;
        }

        .puzzle-piece {
            width: 25px;
            height: 25px;
            border: 1px solid #e2e8f0;
            border-radius: 3px;
            transition: all 0.3s ease;
        }

        .puzzle-piece.filled {
            background: #10b981;
            border-color: #059669;
        }

        .puzzle-piece.excellent {
            background: #3b82f6;
            border-color: #2563eb;
        }

        /* Metrics */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
            border-left: 5px solid;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .metric-card.success {
            border-left-color: #10b981;
        }

        .metric-card.info {
            border-left-color: #3b82f6;
        }

        .metric-card.warning {
            border-left-color: #f59e0b;
        }

        .metric-card.danger {
            border-left-color: #ef4444;
        }

        .metric-card .metric-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 8px;
        }

        .metric-card .metric-label {
            font-size: 0.9rem;
            font-weight: 600;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }

        .metric-description {
            font-size: 0.85rem;
            color: #94a3b8;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #f1f5f9;
        }

        .metric-row:last-child {
            border-bottom: none;
        }

        .metric-label {
            font-weight: 500;
            color: #64748b;
        }

        .metric-value {
            font-weight: 700;
            font-size: 1.1rem;
            color: #1e293b;
        }

        /* Input styles */
        input[type=number], input[type=date] {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1.1rem;
            text-align: center;
        }

        input:disabled {
            background: #f1f5f9;
            color: #94a3b8;
            cursor: not-allowed;
        }

        button {
            padding: 12px 24px;
            background: #3b82f6;
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        button:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        button:disabled {
            background: #cbd5e1;
            cursor: not-allowed;
            transform: none;
        }

        /* Health Status */
        .health-status {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .health-excellent {
            background: #dbeafe;
            color: #1e40af;
        }

        .health-strong {
            background: #d1fae5;
            color: #065f46;
        }

        .health-moderate {
            background: #fef3c7;
            color: #92400e;
        }

        .health-weak {
            background: #fee2e2;
            color: #991b1b;
        }

        /* Status Classes */
        .status-excellent { color: #3b82f6; }
        .status-good { color: #059669; }
        .status-warning { color: #d97706; }
        .status-critical { color: #dc2626; }
    </style>
</head>
<body>
    <!-- Password Screen -->
    <div id="passwordScreen" class="password-screen">
        <div class="password-container">
            <h2>🔐 Secure Access</h2>
            <p>Enter the dashboard password to continue</p>
            <input type="password" id="passwordInput" class="password-input" placeholder="Enter password" maxlength="4">
            <button onclick="checkPassword()" class="password-btn">Access Dashboard</button>
            <div id="passwordError" class="password-error" style="display: none;">
                Incorrect password. Please try again.
            </div>
        </div>
    </div>

    <!-- Main Dashboard Content -->
    <div id="mainContent" class="main-content">
        <div class="container">
            <div class="header">
                <div class="status-indicator">
                    <div id="trafficLight" class="traffic-light yellow"></div>
                    <span id="paceStatusText" class="status-text">Calculating...</span>
                </div>
                <button class="logout-btn" onclick="logout()">🔓 Logout</button>
                <h1>PACE Enrollment Pipeline</h1>
                <p>Professional Dashboard • Real-time Analytics • DHCS Compliance Tracking</p>
            </div>

            <!-- Overview Tab -->
            <div id="overview" class="tab-content active">
                <div class="card puzzle-container">
                    <h3>🧩 Target Achievement Progress</h3>
                    <div class="puzzle-grid" id="puzzleGrid">
                        <!-- Puzzle pieces generated by JavaScript -->
                    </div>
                    <div id="puzzleStatus">
                        <span id="completionPercent">0%</span> Complete
                        <div style="margin-top: 10px;">
                            <span class="health-status" id="pipelineHealthBadge">Calculating...</span>
                        </div>
                    </div>
                </div>

                <div class="metrics-grid">
                    <div class="metric-card info">
                        <div class="metric-value" id="pipelineScheduled">0</div>
                        <div class="metric-label">PIPELINE ASSESSMENTS</div>
                        <div class="metric-description">Scheduled in collection window</div>
                    </div>
                    <div class="metric-card warning">
                        <div class="metric-value" id="totalSubmitted">0</div>
                        <div class="metric-label">TOTAL SUBMITTED</div>
                        <div class="metric-description">Files sent to DHCS this cycle</div>
                    </div>
                    <div class="metric-card success">
                        <div class="metric-value" id="projectedEnrollments">100</div>
                        <div class="metric-label">TARGET ENROLLMENTS</div>
                        <div class="metric-description">Goal for current cycle</div>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>📈 Pipeline Health Analysis</h3>
                        <div class="metric-row">
                            <span class="metric-label">Current Pipeline Strength</span>
                            <span class="metric-value" id="pipelineStrength">0 Assessments</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Required for Target</span>
                            <span class="metric-value" id="requiredPipeline">222 Assessments</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Pipeline Status</span>
                            <span class="metric-value status-critical" id="pipelineStatus">WEAK</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Target Achievement</span>
                            <span class="metric-value status-critical" id="targetAchievement">0%</span>
                        </div>
                    </div>

                    <div class="card">
                        <h3>📊 Current Capitation Cycle</h3>
                        <div class="metric-row">
                            <span class="metric-label">Collection Window</span>
                            <span class="metric-value" id="collectionWindow">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Days Remaining</span>
                            <span class="metric-value" id="daysRemaining">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Internal Cutoff</span>
                            <span class="metric-value" id="internalCutoff">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">DHCS Deadline</span>
                            <span class="metric-value" id="dhcsDeadline">Calculating...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ========== GLOBAL CONFIG ==========
        const CORRECT_PASSWORD = '5470';
        const ADMIN_PASSWORD = '9999';
        
        // DHCS Deadlines (Fixed July 21 Date)
        const dhcsDeadlines = [
            new Date("2025-01-22"), new Date("2025-02-19"), new Date("2025-03-19"),
            new Date("2025-04-18"), new Date("2025-05-19"), new Date("2025-06-19"),
            new Date("2025-07-21"), new Date("2025-08-21"), new Date("2025-09-18"),
            new Date("2025-10-16"), new Date("2025-11-19"), new Date("2025-12-18"),
            new Date("2026-01-20"), new Date("2026-02-18"), new Date("2026-03-19")
        ];

        // Dashboard Data State
        let dashboardData = {
            pipelineScheduled: 0,
            totalSubmitted: 0,
            targetEnrollments: 100,
            submissionHistory: [],
            committee: {
                behavioralHealth: 0,
                healthSafety: 0,
                mdReview: 0,
                medicalRecords: 0
            },
            assessments: {
                scheduled: 0,
                level1Ready: 0
            },
            census: {
                starting: 5200,
                disenrollments: 0,
                approvals: 0,
                enrollments: 0,
                history: []
            }
        };

        // ========== AUTHENTICATION ==========
        function checkPassword() {
            console.log('🔍 Password check started');
            
            const input = document.getElementById('passwordInput');
            const error = document.getElementById('passwordError');
            const passwordScreen = document.getElementById('passwordScreen');
            const mainContent = document.getElementById('mainContent');
            
            if (!input) {
                console.error('❌ Password input not found!');
                alert('Error: Password input not found');
                return;
            }
            
            const enteredPassword = input.value.trim();
            console.log('✏️ Entered password:', `"${enteredPassword}"`);
            console.log('🎯 Expected password:', `"${CORRECT_PASSWORD}"`);
            console.log('✅ Match?', enteredPassword === CORRECT_PASSWORD);
            
            if (enteredPassword === CORRECT_PASSWORD) {
                console.log('🎉 PASSWORD CORRECT!');
                
                // Hide password screen
                if (passwordScreen) passwordScreen.style.display = 'none';
                
                // Show main content
                if (mainContent) mainContent.style.display = 'block';
                
                // Initialize dashboard
                try {
                    loadDashboardData();
                    initializeDashboard();
                } catch (e) {
                    console.error('Dashboard init error:', e);
                }
                
            } else {
                console.log('❌ PASSWORD INCORRECT');
                if (error) {
                    error.style.display = 'block';
                    setTimeout(() => error.style.display = 'none', 3000);
                }
                input.value = '';
                input.focus();
            }
        }

        function logout() {
            localStorage.clear();
            location.reload();
        }

        // ========== DATA PERSISTENCE ==========
        function saveDashboardData() {
            localStorage.setItem('paceData', JSON.stringify(dashboardData));
        }

        function loadDashboardData() {
            const saved = localStorage.getItem('paceData');
            if (saved) {
                dashboardData = { ...dashboardData, ...JSON.parse(saved) };
            }
        }

        // ========== BUSINESS DAY CALCULATIONS ==========
        function subtractBusinessDays(date, days) {
            let result = new Date(date);
            let businessDaysLeft = days;
            
            const holidays = [
                new Date("2025-01-01"), new Date("2025-01-20"), new Date("2025-02-17"),
                new Date("2025-05-26"), new Date("2025-07-04"), new Date("2025-09-01"),
                new Date("2025-11-11"), new Date("2025-11-27"), new Date("2025-11-28"),
                new Date("2025-12-25")
            ];
            
            function isHoliday(checkDate) {
                return holidays.some(holiday => {
                    return holiday.getFullYear() === checkDate.getFullYear() &&
                           holiday.getMonth() === checkDate.getMonth() &&
                           holiday.getDate() === checkDate.getDate();
                });
            }
            
            while (businessDaysLeft > 0) {
                result.setDate(result.getDate() - 1);
                if (result.getDay() !== 0 && result.getDay() !== 6 && !isHoliday(result)) {
                    businessDaysLeft--;
                }
            }
            return result;
        }

        function findCurrentCycle() {
            const today = new Date();
            let cycleIndex = -1;
            
            for (let i = 0; i < dhcsDeadlines.length; i++) {
                if (today <= dhcsDeadlines[i]) {
                    cycleIndex = i;
                    break;
                }
            }
            
            if (cycleIndex === -1) return null;
            
            const dhcsCutoff = dhcsDeadlines[cycleIndex];
            const previousCutoff = cycleIndex > 0 ? dhcsDeadlines[cycleIndex - 1] : null;
            
            const internalCutoff = subtractBusinessDays(dhcsCutoff, 5);
            
            let collectionStart;
            if (previousCutoff) {
                const previousInternalCutoff = subtractBusinessDays(previousCutoff, 5);
                collectionStart = new Date(previousInternalCutoff);
                collectionStart.setDate(collectionStart.getDate() + 1);
            } else {
                collectionStart = new Date(today.getFullYear(), today.getMonth(), 1);
            }
            
            const firstBatchDate = new Date(dhcsCutoff.getFullYear(), dhcsCutoff.getMonth(), 1);
            
            return {
                dhcsDeadline: dhcsCutoff,
                internalCutoff: internalCutoff,
                collectionStart: collectionStart,
                firstBatchDate: firstBatchDate
            };
        }

        function formatDate(date) {
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
        }

        function calculateDaysRemaining(targetDate) {
            const today = new Date();
            const diffTime = targetDate - today;
            return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        }

        // ========== PUZZLE SYSTEM ==========
        function createPuzzleGrid() {
            try {
                const grid = document.getElementById('puzzleGrid');
                if (!grid) return;
                
                grid.innerHTML = '';
                for (let i = 0; i < 100; i++) {
                    const piece = document.createElement('div');
                    piece.className = 'puzzle-piece';
                    piece.id = `piece-${i}`;
                    grid.appendChild(piece);
                }
            } catch (error) {
                console.error('Puzzle grid creation error:', error);
            }
        }

        function updatePuzzleProgress(percentage) {
            try {
                const pieces = document.querySelectorAll('.puzzle-piece');
                const fillCount = Math.floor(percentage);
                
                pieces.forEach((piece, index) => {
                    piece.className = 'puzzle-piece';
                    if (index < fillCount) {
                        if (percentage >= 110) {
                            piece.classList.add('excellent');
                        } else {
                            piece.classList.add('filled');
                        }
                    }
                });

                const completionElement = document.getElementById('completionPercent');
                if (completionElement) {
                    completionElement.textContent = Math.round(percentage) + '%';
                }
                
                const badge = document.getElementById('pipelineHealthBadge');
                if (badge) {
                    if (percentage >= 110) {
                        badge.textContent = 'EXCELLENT';
                        badge.className = 'health-status health-excellent';
                    } else if (percentage >= 100) {
                        badge.textContent = 'STRONG';
                        badge.className = 'health-status health-strong';
                    } else if (percentage >= 75) {
                        badge.textContent = 'MODERATE';
                        badge.className = 'health-status health-moderate';
                    } else {
                        badge.textContent = 'WEAK';
                        badge.className = 'health-status health-weak';
                    }
                }
            } catch (error) {
                console.error('Puzzle progress update error:', error);
            }
        }

        // ========== PIPELINE CALCULATIONS ==========
        function calculateRequiredPipeline() {
            const targetEnrollments = dashboardData.targetEnrollments || 100;
            const submissionsNeeded = Math.ceil(targetEnrollments / 0.75);
            const remainingSubmissions = submissionsNeeded - dashboardData.totalSubmitted;
            const assessmentsNeeded = Math.ceil(Math.max(0, remainingSubmissions) / 0.60);
            return Math.max(assessmentsNeeded, Math.ceil(targetEnrollments / 0.75 / 0.60));
        }

        function calculatePipelineHealth() {
            try {
                const required = calculateRequiredPipeline();
                const current = dashboardData.pipelineScheduled;
                const percentage = current > 0 ? (current / required) * 100 : 0;
                
                console.log('Pipeline Health Calculation:', {
                    current: current,
                    required: required,
                    percentage: percentage
                });
                
                updatePuzzleProgress(percentage);
                updateTrafficLight(percentage);
                
                const elements = {
                    pipelineStrength: document.getElementById('pipelineStrength'),
                    requiredPipeline: document.getElementById('requiredPipeline'),
                    targetAchievement: document.getElementById('targetAchievement'),
                    pipelineStatus: document.getElementById('pipelineStatus'),
                    pipelineScheduled: document.getElementById('pipelineScheduled'),
                    totalSubmitted: document.getElementById('totalSubmitted'),
                    projectedEnrollments: document.getElementById('projectedEnrollments')
                };
                
                if (elements.pipelineStrength) elements.pipelineStrength.textContent = current + ' Assessments';
                if (elements.requiredPipeline) elements.requiredPipeline.textContent = required + ' Assessments';
                if (elements.targetAchievement) elements.targetAchievement.textContent = Math.round(percentage) + '%';
                if (elements.pipelineScheduled) elements.pipelineScheduled.textContent = current;
                if (elements.totalSubmitted) elements.totalSubmitted.textContent = dashboardData.totalSubmitted;
                if (elements.projectedEnrollments) elements.projectedEnrollments.textContent = dashboardData.targetEnrollments;
                
                if (elements.pipelineStatus) {
                    if (percentage >= 110) {
                        elements.pipelineStatus.textContent = 'EXCELLENT';
                        elements.pipelineStatus.className = 'metric-value status-excellent';
                    } else if (percentage >= 100) {
                        elements.pipelineStatus.textContent = 'STRONG';
                        elements.pipelineStatus.className = 'metric-value status-good';
                    } else if (percentage >= 75) {
                        elements.pipelineStatus.textContent = 'MODERATE';
                        elements.pipelineStatus.className = 'metric-value status-warning';
                    } else {
                        elements.pipelineStatus.textContent = 'WEAK';
                        elements.pipelineStatus.className = 'metric-value status-critical';
                    }
                }
            } catch (error) {
                console.error('Pipeline health calculation error:', error);
            }
        }

        function updateTrafficLight(percentage) {
            try {
                const light = document.getElementById('trafficLight');
                const statusText = document.getElementById('paceStatusText');
                
                if (!light || !statusText) return;
                
                light.className = 'traffic-light';
                
                if (percentage >= 100) {
                    light.classList.add('green');
                    statusText.textContent = 'Strong Pipeline';
                } else if (percentage >= 75) {
                    light.classList.add('yellow');
                    statusText.textContent = 'Moderate Pipeline';
                } else {
                    light.classList.add('red');
                    statusText.text
                   statusText.textContent = 'Weak Pipeline';
                }
            } catch (error) {
                console.error('Traffic light update error:', error);
            }
        }

        // ========== DATE CALCULATIONS ==========
        function updateDateCalculations() {
            try {
                const cycle = findCurrentCycle();
                if (!cycle) return;
                
                const elements = {
                    collectionWindow: document.getElementById('collectionWindow'),
                    daysRemaining: document.getElementById('daysRemaining'),
                    internalCutoff: document.getElementById('internalCutoff'),
                    dhcsDeadline: document.getElementById('dhcsDeadline')
                };
                
                const collectionWindowText = `${formatDate(cycle.collectionStart)} - ${formatDate(cycle.internalCutoff)}`;
                const daysRemainingCount = calculateDaysRemaining(cycle.internalCutoff);
                
                if (elements.collectionWindow) elements.collectionWindow.textContent = collectionWindowText;
                if (elements.daysRemaining) elements.daysRemaining.textContent = daysRemainingCount + ' days';
                if (elements.internalCutoff) elements.internalCutoff.textContent = formatDate(cycle.internalCutoff);
                if (elements.dhcsDeadline) elements.dhcsDeadline.textContent = formatDate(cycle.dhcsDeadline);
                
            } catch (error) {
                console.error('Date calculations update error:', error);
            }
        }

        // ========== INITIALIZE DASHBOARD ==========
        function initializeDashboard() {
            try {
                console.log('🚀 INITIALIZING DASHBOARD');
                
                createPuzzleGrid();
                loadDashboardData();
                
                setTimeout(() => {
                    calculatePipelineHealth();
                    updateDateCalculations();
                }, 100);
                
                console.log('✅ DASHBOARD INITIALIZED');
                
            } catch (error) {
                console.error('Dashboard initialization error:', error);
            }
        }

        // ========== SINGLE DOM READY HANDLER ==========
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 DOM Content Loaded');
            
            // Setup password functionality
            const passwordInput = document.getElementById('passwordInput');
            const passwordScreen = document.getElementById('passwordScreen');
            
            if (passwordInput && passwordScreen) {
                console.log('✅ Password elements found');
                
                // Add Enter key listener
                passwordInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        console.log('⌨️ Enter key pressed');
                        checkPassword();
                    }
                });
                
                // Focus the input
                passwordInput.focus();
                console.log('🎯 Password input focused');
                
            } else {
                console.error('❌ Password elements not found:', {
                    input: !!passwordInput,
                    screen: !!passwordScreen
                });
            }
            
            // Make functions globally accessible
            window.checkPassword = checkPassword;
            window.logout = logout;
            
            console.log('🔧 Functions made globally accessible');
</script>
</body>
</html>
