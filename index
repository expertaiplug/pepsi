<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PACE Enrollment Pipeline Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Password Screen */
        .password-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .password-container {
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
            text-align: center;
            max-width: 400px;
            width: 90%;
        }

        .password-container h2 {
            color: #1e293b;
            margin-bottom: 20px;
            font-size: 1.8rem;
        }

        .password-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1.2rem;
            text-align: center;
            margin-bottom: 20px;
            font-weight: 600;
            letter-spacing: 2px;
        }

        .password-btn {
            width: 100%;
            padding: 15px;
            background: #3b82f6;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .password-btn:hover {
            background: #2563eb;
        }

        .password-error {
            color: #dc2626;
            margin-top: 15px;
            font-weight: 500;
        }

        .main-content {
            display: none;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            text-align: center;
            position: relative;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .status-indicator {
            position: absolute;
            top: 20px;
            left: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .traffic-light {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.3);
            animation: pulse 2s infinite;
        }

        .traffic-light.green {
            background: #10b981;
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
        }

        .traffic-light.yellow {
            background: #f59e0b;
            box-shadow: 0 0 10px rgba(245, 158, 11, 0.5);
        }

        .traffic-light.red {
            background: #ef4444;
            box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
        }

        .status-text {
            color: white;
            font-weight: 600;
            font-size: 0.9rem;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .tabs {
            display: flex;
            background: white;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .tab {
            flex: 1;
            padding: 12px 8px;
            text-align: center;
            background: #f1f5f9;
            border: none;
            cursor: pointer;
            font-weight: 600;
            color: #64748b;
            transition: all 0.3s ease;
            border-right: 1px solid #e2e8f0;
            font-size: 0.85rem;
        }

        .tab:last-child {
            border-right: none;
        }

        .tab.active {
            background: #3b82f6;
            color: white;
        }

        .tab:hover:not(.active) {
            background: #e2e8f0;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Card System */
        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            margin-bottom: 20px;
            color: #1e293b;
            font-size: 1.3rem;
        }

        /* Puzzle Visual */
        .puzzle-container {
            text-align: center;
        }

        .puzzle-grid {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            gap: 2px;
            max-width: 300px;
            margin: 20px auto;
        }

        .puzzle-piece {
            width: 25px;
            height: 25px;
            border: 1px solid #e2e8f0;
            border-radius: 3px;
            transition: all 0.3s ease;
        }

        .puzzle-piece.filled {
            background: #10b981;
            border-color: #059669;
        }

        .puzzle-piece.excellent {
            background: #3b82f6;
            border-color: #2563eb;
        }

        /* Metrics */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
            border-left: 5px solid;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .metric-card.success {
            border-left-color: #10b981;
        }

        .metric-card.info {
            border-left-color: #3b82f6;
        }

        .metric-card.warning {
            border-left-color: #f59e0b;
        }

        .metric-card.danger {
            border-left-color: #ef4444;
        }

        .metric-card .metric-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 8px;
        }

        .metric-card .metric-label {
            font-size: 0.9rem;
            font-weight: 600;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }

        .metric-description {
            font-size: 0.85rem;
            color: #94a3b8;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #f1f5f9;
        }

        .metric-row:last-child {
            border-bottom: none;
        }

        .metric-label {
            font-weight: 500;
            color: #64748b;
        }

        .metric-value {
            font-weight: 700;
            font-size: 1.1rem;
            color: #1e293b;
        }

        /* Input styles */
        input[type=number], input[type=date] {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1.1rem;
            text-align: center;
        }

        input:disabled {
            background: #f1f5f9;
            color: #94a3b8;
            cursor: not-allowed;
        }

        button {
            padding: 12px 24px;
            background: #3b82f6;
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        button:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        button:disabled {
            background: #cbd5e1;
            cursor: not-allowed;
            transform: none;
        }

        /* Health Status */
        .health-status {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .health-excellent {
            background: #dbeafe;
            color: #1e40af;
        }

        .health-strong {
            background: #d1fae5;
            color: #065f46;
        }

        .health-moderate {
            background: #fef3c7;
            color: #92400e;
        }

        .health-weak {
            background: #fee2e2;
            color: #991b1b;
        }

        /* Status Classes */
        .status-excellent { color: #3b82f6; }
        .status-good { color: #059669; }
        .status-warning { color: #d97706; }
        .status-critical { color: #dc2626; }

        /* Tables */
        .committee-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        .committee-table th,
        .committee-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .committee-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }

        .committee-table tr:hover {
            background: #f8fafc;
        }

        /* Sync Status */
        .sync-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 8px;
        }

        .sync-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #10b981;
            animation: pulse 2s infinite;
        }

        .sync-indicator.connecting {
            background: #f59e0b;
        }

        .sync-indicator.error {
            background: #ef4444;
        }

        /* Incentive Tiers */
        .tier-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .tier-card {
            background: white;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            border: 2px solid #e2e8f0;
            transition: all 0.2s ease;
        }

        .tier-card.achieved {
            border-color: #10b981;
            background: #f0fdf4;
        }

        .tier-card.current {
            border-color: #3b82f6;
            background: #eff6ff;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }

        .tier-card.locked {
            opacity: 0.5;
        }

        .tier-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e293b;
        }

        .tier-target {
            font-size: 0.9rem;
            color: #64748b;
            margin: 5px 0;
        }

        .tier-reward {
            font-size: 1.1rem;
            font-weight: 600;
            color: #059669;
        }

        /* Admin Controls */
        .admin-panel {
            background: #f8fafc;
            border: 2px dashed #cbd5e1;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
        }

        .controls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .input-group {
            display: flex;
            flex-direction: column;
        }

        .input-group label {
            margin-bottom: 5px;
            font-weight: 600;
            color: #374151;
        }

        /* Loading States */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .header {
                padding: 20px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .status-indicator,
            .logout-btn {
                position: static;
                margin-bottom: 15px;
            }

            .tabs {
                flex-wrap: wrap;
            }

            .tab {
                flex: 1 1 48%;
            }

            .metrics-grid {
                grid-template-columns: 1fr;
            }

            .puzzle-grid {
                max-width: 250px;
            }

            .puzzle-piece {
                width: 20px;
                height: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Password Screen -->
    <div id="passwordScreen" class="password-screen">
        <div class="password-container">
            <h2>🔐 Secure Access</h2>
            <p>Enter the dashboard password to continue</p>
            <input type="password" id="passwordInput" class="password-input" placeholder="Enter password" maxlength="4">
            <button onclick="checkPassword()" class="password-btn">Access Dashboard</button>
            <div id="passwordError" class="password-error" style="display: none;">
                Incorrect password. Please try again.
            </div>
        </div>
    </div>

    <!-- Main Dashboard Content -->
    <div id="mainContent" class="main-content">
        <div class="container">
            <div class="header">
                <div class="status-indicator">
                    <div id="trafficLight" class="traffic-light yellow"></div>
                    <span id="paceStatusText" class="status-text">Calculating...</span>
                </div>
                <button class="logout-btn" onclick="logout()">🔓 Logout</button>
                <h1>PACE Enrollment Pipeline</h1>
                <p>Professional Dashboard • Real-time Analytics • DHCS Compliance Tracking</p>
            </div>

            <div class="card" style="border: 2px dashed #cbd5e1;">
                <div class="sync-status">
                    <div id="syncIndicator" class="sync-indicator"></div>
                    <div>
                        <div><strong>Status:</strong> <span id="connectionStatus">Connected</span></div>
                        <div><strong>Last synced:</strong> <span id="lastUpdate">Just now</span></div>
                    </div>
                </div>
                <button id="refreshBtn" onclick="refreshData()">🔄 Refresh Data</button>
            </div>

            <div class="tabs">
                <button class="tab active" onclick="showTab('overview')">📊 Overview</button>
                <button class="tab" onclick="showTab('submissions')">📝 Tracker</button>
                <button class="tab" onclick="showTab('committee')">🏛️ Committee</button>
                <button class="tab" onclick="showTab('calendar')">📅 Calendar</button>
                <button class="tab" onclick="showTab('deadlines')">⏰ Deadlines</button>
                <button class="tab" onclick="showTab('targets')">📈 Targets</button>
                <button class="tab" onclick="showTab('census')">👥 Census</button>
                <button class="tab" onclick="showTab('incentives')">🎯 Incentives</button>
                <button class="tab" onclick="showTab('dataentry')">🔒 Admin</button>
            </div>

            <!-- Overview Tab -->
            <div id="overview" class="tab-content active">
                <div class="card puzzle-container">
                    <h3>🧩 Target Achievement Progress</h3>
                    <div class="puzzle-grid" id="puzzleGrid">
                        <!-- Puzzle pieces generated by JavaScript -->
                    </div>
                    <div id="puzzleStatus">
                        <span id="completionPercent">0%</span> Complete
                        <div style="margin-top: 10px;">
                            <span class="health-status" id="pipelineHealthBadge">Calculating...</span>
                        </div>
                    </div>
                </div>

                <div class="metrics-grid">
                    <div class="metric-card info">
                        <div class="metric-value" id="pipelineScheduled">248</div>
                        <div class="metric-label">PIPELINE ASSESSMENTS</div>
                        <div class="metric-description">Scheduled in collection window</div>
                    </div>
                    <div class="metric-card warning">
                        <div class="metric-value" id="totalSubmitted">45</div>
                        <div class="metric-label">TOTAL SUBMITTED</div>
                        <div class="metric-description">Files sent to DHCS this cycle</div>
                    </div>
                    <div class="metric-card success">
                        <div class="metric-value" id="projectedEnrollments">100</div>
                        <div class="metric-label">PROJECTED ENROLLMENTS</div>
                        <div class="metric-description">Target for current cycle</div>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>📈 Pipeline Health Analysis</h3>
                        <div class="metric-row">
                            <span class="metric-label">Current Pipeline Strength</span>
                            <span class="metric-value" id="pipelineStrength">248 Assessments</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Required for Target</span>
                            <span class="metric-value" id="requiredPipeline">198 Assessments</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Pipeline Status</span>
                            <span class="metric-value status-excellent" id="pipelineStatus">STRONG</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Target Achievement</span>
                            <span class="metric-value status-excellent" id="targetAchievement">125%</span>
                        </div>
                    </div>

                    <div class="card">
                        <h3>📊 Current Capitation Cycle</h3>
                        <div class="metric-row">
                            <span class="metric-label">Collection Window</span>
                            <span class="metric-value" id="collectionWindow">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Days Remaining</span>
                            <span class="metric-value" id="daysRemaining">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Internal Cutoff</span>
                            <span class="metric-value" id="internalCutoff">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">DHCS Deadline</span>
                            <span class="metric-value" id="dhcsDeadline">Calculating...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Submission Tracker Tab -->
            <div id="submissions" class="tab-content">
                <div class="card">
                    <h3>📝 Manual DHCS Submission Tracker</h3>
                    <p style="margin-bottom: 20px; color: #64748b;">Enter files submitted to DHCS to auto-update all pipeline calculations</p>
                    
                    <div style="display: flex; gap: 15px; margin-bottom: 20px; align-items: end;">
                        <div class="input-group" style="flex: 1;">
                            <label for="submissionDate">Submission Date</label>
                            <input type="date" id="submissionDate">
                        </div>
                        <div class="input-group" style="flex: 1;">
                            <label for="filesSubmitted">Files Submitted</label>
                            <input type="number" id="filesSubmitted" min="0" max="100" placeholder="0">
                        </div>
                        <button onclick="addSubmission()">Add Submission</button>
                    </div>

                    <div class="card" style="background: #f8fafc; border-left: 4px solid #3b82f6;">
                        <h4>📊 Real-Time Impact Analysis</h4>
                        <div class="metric-row">
                            <span class="metric-label">Total Submitted This Cycle</span>
                            <span class="metric-value" id="totalCycleSubmissions">45</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Remaining Submissions Needed</span>
                            <span class="metric-value" id="remainingNeeded">104</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Pipeline Required (Remaining)</span>
                            <span class="metric-value" id="pipelineRequired">173 Assessments</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Updated Weekly Target</span>
                            <span class="metric-value" id="weeklyTarget">52 Files/Week</span>
                        </div>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>📈 Submission History</h3>
                        <div id="submissionHistory">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>

                    <div class="card">
                        <h3>🎯 Dynamic Targets</h3>
                        <div class="metric-row">
                            <span class="metric-label">Original Target</span>
                            <span class="metric-value">149 submissions</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Already Submitted</span>
                            <span class="metric-value" id="alreadySubmitted">45 files</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Completion Rate</span>
                            <span class="metric-value" id="completionRate">30% Complete</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Pace Status</span>
                            <span class="metric-value status-excellent" id="paceStatus">ON TRACK</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Committee Review Tab -->
            <div id="committee" class="tab-content">
                <div class="card">
                    <h3>🏛️ Level 2 Committee Review Pipeline</h3>
                    <p style="margin-bottom: 20px; color: #64748b;">Active files under committee review - these provide additional submissions beyond core pipeline</p>
                    <table class="committee-table">
                        <thead>
                            <tr>
                                <th>Committee Type</th>
                                <th>Files in Review</th>
                                <th>Processing Time</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Behavioral Health</td>
                                <td id="committeeBH">7</td>
                                <td>3-5 days</td>
                            </tr>
                            <tr>
                                <td>Health & Safety</td>
                                <td id="committeeHS">1</td>
                                <td>2-4 days</td>
                            </tr>
                            <tr>
                                <td>MD Review</td>
                                <td id="committeeMD">6</td>
                                <td>1-3 days</td>
                            </tr>
                            <tr>
                                <td>Medical Records</td>
                                <td id="committeeMR">23</td>
                                <td>5-7 days</td>
                            </tr>
                            <tr style="border-top: 2px solid #e2e8f0; font-weight: bold; background: #f8fafc;">
                                <td>Total Bonus Pipeline</td>
                                <td id="committeeTotal">37</td>
                                <td>Variable</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>📊 Department Pipeline</h3>
                        <div class="metric-row">
                            <span class="metric-label">Assessments Scheduled Today</span>
                            <span class="metric-value" id="scheduledAssessments">12</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Estimated Level 1 Ready</span>
                            <span class="metric-value" id="level1Ready">8</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Total in Committee Review</span>
                            <span class="metric-value" id="totalCommitteeReview">37</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Assessment Conversion Rate</span>
                            <span class="metric-value">60%</span>
                        </div>
                    </div>

                    <div class="card">
                        <h3>🎯 Pipeline Targets</h3>
                        <div class="metric-row">
                            <span class="metric-label">Target Enrollments</span>
                            <span class="metric-value" id="targetEnrollments">100</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Submissions Needed (75%)</span>
                            <span class="metric-value">149</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Pipeline Required</span>
                            <span class="metric-value">248 assessments</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calendar Tab -->
            <div id="calendar" class="tab-content">
                <h2>📅 DHCS Submission Calendar 2025</h2>
                <p style="margin-bottom: 30px; color: #64748b;">Visual pipeline scheduling guide based on official DHCS calendar</p>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px;">
                    <!-- Current Active Cycle -->
                    <div class="card">
                        <h3>📅 Current Active Cycle</h3>
                        <div style="background: #f8fafc; border-radius: 8px; padding: 20px; margin: 15px 0;">
                            <div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 3px; text-align: center;">
                                <div style="font-weight: bold; padding: 5px;">Mon</div>
                                <div style="font-weight: bold; padding: 5px;">Tue</div>
                                <div style="font-weight: bold; padding: 5px;">Wed</div>
                                <div style="font-weight: bold; padding: 5px;">Thu</div>
                                <div style="font-weight: bold; padding: 5px;">Fri</div>
                                <div style="font-weight: bold; padding: 5px;">Sat</div>
                                <div style="font-weight: bold; padding: 5px;">Sun</div>
                                
                                <!-- Calendar grid populated by JavaScript -->
                                <div id="currentCalendarGrid"></div>
                            </div>
                        </div>
                        <div style="font-size: 0.9rem; color: #64748b;">
                            <div>🟢 <strong>Green:</strong> Assessment Collection Window</div>
                            <div>🟠 <strong>Orange:</strong> Internal Cutoff Date</div>
                            <div>🔴 <strong>Red:</strong> DHCS Electronic Deadline</div>
                        </div>
                    </div>

                    <!-- Next Cycle -->
                    <div class="card">
                        <h3>📅 Next Cycle Planning</h3>
                        <div style="background: #f8fafc; border-radius: 8px; padding: 20px; margin: 15px 0;">
                            <div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 3px; text-align: center;">
                                <div style="font-weight: bold; padding: 5px;">Mon</div>
                                <div style="font-weight: bold; padding: 5px;">Tue</div>
                                <div style="font-weight: bold; padding: 5px;">Wed</div>
                                <div style="font-weight: bold; padding: 5px;">Thu</div>
                                <div style="font-weight: bold; padding: 5px;">Fri</div>
                                <div style="font-weight: bold; padding: 5px;">Sat</div>
                                <div style="font-weight: bold; padding: 5px;">Sun</div>
                                
                                <!-- Next calendar grid populated by JavaScript -->
                                <div id="nextCalendarGrid"></div>
                            </div>
                        </div>
                        <div style="font-size: 0.9rem; color: #64748b;">
                            <div>🔵 <strong>Blue:</strong> Next Assessment Window</div>
                            <div>🟠 <strong>Orange:</strong> Planning Internal Cutoff</div>
                            <div>🔴 <strong>Red:</strong> Future Electronic Deadline</div>
                        </div>
                    </div>
                </div>

                <div class="card" style="margin-top: 30px; background: linear-gradient(135deg, #e0f2fe 0%, #b3e5fc 100%);">
                    <h3>🎯 Current Focus</h3>
                    <div class="dashboard-grid">
                        <div>
                            <div class="metric-row">
                                <span class="metric-label">Assessment Window</span>
                                <span class="metric-value" id="calendarCollectionWindow">Calculating...</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Pipeline Target</span>
                                <span class="metric-value">248 assessments</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Days Remaining</span>
                                <span class="metric-value" id="calendarDaysRemaining">Calculating...</span>
                            </div>
                        </div>
                        <div>
                            <div class="metric-row">
                                <span class="metric-label">Internal Cutoff</span>
                                <span class="metric-value" id="calendarInternalCutoff">Calculating...</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Electronic Cutoff</span>
                                <span class="metric-value" id="calendarDhcsDeadline">Calculating...</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">First Batch Date</span>
                                <span class="metric-value" id="calendarFirstBatch">Calculating...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Deadlines Tab -->
            <div id="deadlines" class="tab-content">
                <h2>📅 DHCS Capitation Calendar 2025-2026</h2>
                
                <div class="card" style="border-left: 5px solid #ef4444;">
                    <h3>⚡ ACTIVE CYCLE</h3>
                    <div style="font-size: 2rem; font-weight: 700; color: #1e293b; margin: 10px 0;" id="activeCountdown">Calculating...</div>
                    <div class="metric-row">
                        <span class="metric-label">Capitation Month</span>
                        <span class="metric-value" id="activeCapMonth">Calculating...</span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Collection Window</span>
                        <span class="metric-value" id="activeCollectionWindow">Calculating...</span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Internal Cutoff</span>
                        <span class="metric-value" id="activeInternalCutoff">Calculating...</span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">DHCS Electronic Cutoff</span>
                        <span class="metric-value" id="activeDhcsDeadline">Calculating...</span>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h4>📋 Submission Strategy</h4>
                        <div class="metric-row">
                            <span class="metric-label">Buffer Days Available</span>
                            <span class="metric-value">5 business days</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">First Batch Date</span>
                            <span class="metric-value" id="firstBatchDate">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Collection Weeks</span>
                            <span class="metric-value" id="collectionWeeks">Calculating...</span>
                        </div>
                    </div>

                    <div class="card">
                        <h4>🗓️ Upcoming Deadlines</h4>
                        <div class="metric-row">
                            <span class="metric-label">Next Cycle</span>
                            <span class="metric-value" id="nextCycle">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Following Cycle</span>
                            <span class="metric-value" id="followingCycle">Calculating...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Weekly Targets Tab -->
            <div id="targets" class="tab-content">
                <h2>📈 Weekly Submission Targets</h2>
                
                <div class="card">
                    <h3>🎛️ Target Configuration</h3>
                    <div class="controls-grid">
                        <div class="input-group">
                            <label>Target Enrollments</label>
                            <input type="number" id="enrollmentTarget" min="1" max="999" value="100" onchange="updateTargetCalculations()">
                        </div>
                        <div class="input-group">
                            <label>Planned First Batch Size</label>
                            <input type="number" id="firstBatchSize" min="0" max="300" value="0" onchange="updateTargetCalculations()">
                        </div>
                    </div>
                    
                    <div class="card" style="background: #f8fafc; border-left: 4px solid #3b82f6;">
                        <h4>📊 Intelligent Target Calculation</h4>
                        <div class="metric-row">
                            <span class="metric-label">Required Submissions (75% approval)</span>
                            <span class="metric-value" id="requiredSubmissions">149</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Required Assessments (60% conversion)</span>
                            <span class="metric-value" id="requiredAssessments">248</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Remaining After First Batch</span>
                            <span class="metric-value" id="remainingSubmissions">149</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Weekly Target (Post-Batch)</span>
                            <span class="metric-value" id="calculatedWeeklyTarget">75 files/week</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Daily Pace (Mon-Fri)</span>
                            <span class="metric-value" id="calculatedDailyTarget">15 files/day</span>
                        </div>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>🎯 Dynamic Target Analysis</h3>
                        <div class="metric-row">
                            <span class="metric-label">Collection Strategy</span>
                            <span class="metric-value">Hold → Submit → Adjust</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">First Batch Impact</span>
                            <span class="metric-value" id="batchImpact">Ready to calculate</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Countdown to Cutoff</span>
                            <span class="metric-value" id="targetCountdown">Calculating...</span>
                        </div>
                    </div>

                    <div class="card">
                        <h3>⚡ Live Impact Analysis</h3>
                        <div class="metric-row">
                            <span class="metric-label">Current Pipeline Health</span>
                            <span class="metric-value" id="targetsHealthStatus">STRONG</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Recommended Action</span>
                            <span class="metric-value" id="recommendedAction">Maintain current pace</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Success Probability</span>
                            <span class="metric-value" id="successProbability">85%</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Total Census Tab -->
            <div id="census" class="tab-content">
                <h2>👥 Total Census Management</h2>
                
                <div class="admin-panel" id="censusAdminPanel">
                    <h4>🔒 Admin Controls (Password Required)</h4>
                    <div class="controls-grid">
                        <div class="input-group">
                            <label>Starting Census</label>
                            <input type="number" id="startingCensus" disabled>
                        </div>
                        <div class="input-group">
                            <label>DHCS Approvals Received</label>
                            <input type="number" id="dhcsApprovals" disabled>
                        </div>
                        <div class="input-group">
                            <label>Completed Enrollments</label>
                            <input type="number" id="completedEnrollments" disabled>
                        </div>
                        <div class="input-group">
                            <label>Disenrollments</label>
                            <input type="number" id="disenrollments" disabled>
                        </div>
                    </div>
                    <button id="unlockCensusBtn" onclick="unlockCensusInputs()">🔓 Unlock Admin Inputs</button>
                    <button id="saveCensusBtn" onclick="saveCensusData()" style="display: none;">💾 Save Census Data</button>
                </div>

                <div class="metrics-grid">
                    <div class="metric-card info">
                        <div class="metric-value" id="totalCensus">0</div>
                        <div class="metric-label">TOTAL CENSUS</div>
                        <div class="metric-description">Current enrolled members</div>
                    </div>
                    <div class="metric-card success">
                        <div class="metric-value" id="monthToDateNet">0</div>
                        <div class="metric-label">MONTH-TO-DATE NET</div>
                        <div class="metric-description">Net adds this month</div>
                    </div>
                    <div class="metric-card warning">
                        <div class="metric-value" id="projectedYearEnd">0</div>
                        <div class="metric-label">PROJECTED YEAR-END</div>
                        <div class="metric-description">Based on current pace</div>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>📈 Census Trend</h3>
                        <canvas id="censusTrendChart" height="300"></canvas>
                    </div>
                    <div class="card">
                        <h3>🎯 Goal Progress</h3>
                        <canvas id="censusGoalChart" height="300"></canvas>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>📊 Monthly Net Adds</h3>
                        <canvas id="monthlyNetChart" height="300"></canvas>
                    </div>
                    <div class="card">
                        <h3>⚡ Predictive Analytics</h3>
                        <div class="metric-row">
                            <span class="metric-label">Rolling 30-Day Average</span>
                            <span class="metric-value" id="rollingAverage">+0.0/day</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Days to Goal (5,470)</span>
                            <span class="metric-value" id="daysToGoal">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Required Daily Rate</span>
                            <span class="metric-value" id="requiredDailyRate">+0.0/day</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Pace vs Target</span>
                            <span class="metric-value" id="paceVsTarget">On Track</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Incentive Tiers Tab -->
            <div id="incentives" class="tab-content">
                <h2>🎯 Triple Digit Challenge - Incentive Tiers</h2>
                
                <div class="card">
                    <h3>💰 Current Performance vs. Reward Tiers</h3>
                    <div class="tier-grid">
                        <div class="tier-card" id="tier1">
                            <div class="tier-number">1</div>
                            <div class="tier-target">100+ enrollments</div>
                            <div class="tier-reward">$100</div>
                        </div>
                        <div class="tier-card" id="tier2">
                            <div class="tier-number">2</div>
                            <div class="tier-target">110+ enrollments</div>
                            <div class="tier-reward">$200</div>
                        </div>
                        <div class="tier-card" id="tier3">
                            <div class="tier-number">3</div>
                            <div class="tier-target">120+ enrollments</div>
                            <div class="tier-reward">$350</div>
                        </div>
                        <div class="tier-card" id="tier4">
                            <div class="tier-number">4</div>
                            <div class="tier-target">130+ enrollments</div>
                            <div class="tier-reward">$500</div>
                        </div>
                        <div class="tier-card" id="tier5">
                            <div class="tier-number">5</div>
                            <div class="tier-target">140+ enrollments</div>
                            <div class="tier-reward">$650</div>
                        </div>
                        <div class="tier-card" id="tier6">
                            <div class="tier-number">6</div>
                            <div class="tier-target">150+ enrollments</div>
                            <div class="tier-reward">$800</div>
                        </div>
                    </div>
                </div>

                <div class="dashboard-grid">
                    <div class="card">
                        <h3>📊 Tier Achievement Probability</h3>
                        <div class="metric-row">
                            <span class="metric-label">Current Enrollments</span>
                            <span class="metric-value" id="currentEnrollments">0</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Current Tier</span>
                            <span class="metric-value" id="currentTier">Starting</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Next Tier Target</span>
                            <span class="metric-value" id="nextTierTarget">100 (+100 needed)</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Probability to Hit Next</span>
                            <span class="metric-value" id="tierProbability">Calculating...</span>
                        </div>
                    </div>

                    <div class="card">
                        <h3>🎯 Smart Recommendations</h3>
                        <div class="metric-row">
                            <span class="metric-label">Recommended Target</span>
                            <span class="metric-value" id="recommendedTier">Tier 1 ($100)</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Daily Pace Needed</span>
                            <span class="metric-value" id="dailyPaceNeeded">+0.0/day</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Days Remaining</span>
                            <span class="metric-value" id="incentiveDaysRemaining">Calculating...</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Stretch Goal</span>
                            <span class="metric-value" id="stretchGoal">Consider Tier 2</span>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>📈 Tier Progress Visualization</h3>
                    <canvas id="tierProgressChart" height="300"></canvas>
                </div>
            </div>

            <!-- Admin Data Entry Tab -->
            <div id="dataentry" class="tab-content">
                <div class="admin-panel" id="adminPanel">
                    <h3>🔒 Administrative Data Entry</h3>
                    <p style="margin-bottom: 20px; color: #64748b;">Password required to modify operational data</p>
                    
                    <div class="card">
                        <h4>📊 Pipeline Management</h4>
                        <div class="controls-grid">
                            <div class="input-group">
                                <label>Pipeline Assessments Scheduled</label>
                                <input type="number" id="adminPipelineScheduled" disabled>
                            </div>
                            <div class="input-group">
                                <label>DHCS Approvals Received</label>
                                <input type="number" id="adminDhcsApprovals" disabled>
                            </div>
                            <div class="input-group">
                                <label>Pending Enrollments</label>
                                <input type="number" id="adminPendingEnrollments" disabled>
                            </div>
                            <div class="input-group">
                                <label>Approval Conversion Rate %</label>
                                <input type="number" id="adminConversionRate" min="0" max="100" value="85" disabled>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <h4>🏛️ Committee Review</h4>
                        <div class="controls-grid">
                            <div class="input-group">
                                <label>Behavioral Health</label>
                                <input type="number" id="adminCommitteeBH" disabled>
                            </div>
                            <div class="input-group">
                                <label>Health & Safety</label>
                                <input type="number" id="adminCommitteeHS" disabled>
                            </div>
                            <div class="input-group">
                                <label>MD Review</label>
                                <input type="number" id="adminCommitteeMD" disabled>
                            </div>
                            <div class="input-group">
                                <label>Medical Records</label>
                                <input type="number" id="adminCommitteeMR" disabled>
                            </div>
                        </div>
                    </div>

                    <div style="text-align: center; margin-top: 30px;">
                        <button id="unlockAdminBtn" onclick="unlockAdminInputs()">🔓 Unlock Admin Controls</button>
                        <button id="saveAdminBtn" onclick="saveAdminData()" style="display: none; margin-left: 15px;">💾 Save All Data</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ========== GLOBAL CONFIG ==========
        const CORRECT_PASSWORD = '5470';
        const ADMIN_PASSWORD = '9999';
        
        // DHCS Deadlines (Official List)
        const dhcsDeadlines = [
            new Date("2024-12-18"), new Date("2025-01-22"), new Date("2025-02-19"),
            new Date("2025-03-19"), new Date("2025-04-18"), new Date("2025-05-19"),
            new Date("2025-06-19"), new Date("2025-07-21"), new Date("2025-08-21"),
            new Date("2025-09-18"), new Date("2025-10-16"), new Date("2025-11-19"),
            new Date("2025-12-18"), new Date("2026-01-20"), new Date("2026-02-18")
        ];

        // Dashboard Data State
        let dashboardData = {
            pipelineScheduled: 248,
            totalSubmitted: 45,
            targetEnrollments: 100,
            submissionHistory: [],
            committee: {
                behavioralHealth: 7,
                healthSafety: 1,
                mdReview: 6,
                medicalRecords: 23
            },
            assessments: {
                scheduled: 12,
                level1Ready: 8
            },
            census: {
                starting: 5200,
                disenrollments: 0,
                approvals: 0,
                enrollments: 0,
                history: []
            }
        };

        // ========== AUTHENTICATION ==========
        function checkPassword() {
            const input = document.getElementById('passwordInput');
            const error = document.getElementById('passwordError');
            
            if (input.value === CORRECT_PASSWORD) {
document.getElementById('passwordScreen').style.display = 'none';
document.getElementById('mainContent').style.display = 'block';
                loadDashboardData();
                initializeDashboard();
            } else {
                error.style.display = 'block';
                input.value = '';
                setTimeout(() => error.style.display = 'none', 3000);
            }
        }

        // Handle Enter key for password
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('passwordInput');
            if (passwordInput) {
                passwordInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        checkPassword();
                    }
                });
                passwordInput.focus();
            }
        });

        function logout() {
            localStorage.clear();
            location.reload();
        }

        // ========== DATA PERSISTENCE ==========
        function saveDashboardData() {
            localStorage.setItem('paceData', JSON.stringify(dashboardData));
        }

        function loadDashboardData() {
            const saved = localStorage.getItem('paceData');
            if (saved) {
                dashboardData = { ...dashboardData, ...JSON.parse(saved) };
            }
        }

        // ========== TAB NAVIGATION ==========
        function showTab(tabName) {
            try {
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.querySelectorAll('.tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                
                const selectedTab = document.getElementById(tabName);
                const clickedTab = event ? event.target : document.querySelector('.tab');
                
                if (selectedTab) {
                    selectedTab.classList.add('active');
                }
                if (clickedTab) {
                    clickedTab.classList.add('active');
                }
            } catch (error) {
                console.error('Tab switching error:', error);
            }
        }

        // ========== BUSINESS DAY CALCULATIONS ==========
        function subtractBusinessDays(date, days) {
            let result = new Date(date);
            while (days > 0) {
                result.setDate(result.getDate() - 1);
                if (result.getDay() !== 0 && result.getDay() !== 6) {
                    days--;
                }
            }
            return result;
        }

        function findCurrentCycle() {
            const today = new Date();
            let cycleIndex = -1;
            
            for (let i = 0; i < dhcsDeadlines.length; i++) {
                if (today <= dhcsDeadlines[i]) {
                    cycleIndex = i;
                    break;
                }
            }
            
            if (cycleIndex === -1) return null;
            
            const dhcsCutoff = dhcsDeadlines[cycleIndex];
            const previousCutoff = cycleIndex > 0 ? dhcsDeadlines[cycleIndex - 1] : null;
            
            const internalCutoff = subtractBusinessDays(dhcsCutoff, 5);
            
            let collectionStart;
            if (previousCutoff) {
                const previousInternalCutoff = subtractBusinessDays(previousCutoff, 5);
                collectionStart = new Date(previousInternalCutoff);
                collectionStart.setDate(collectionStart.getDate() + 1);
            } else {
                collectionStart = new Date(today.getFullYear(), today.getMonth(), 1);
            }
            
            const firstBatchDate = new Date(dhcsCutoff.getFullYear(), dhcsCutoff.getMonth(), 1);
            
            return {
                dhcsDeadline: dhcsCutoff,
                internalCutoff: internalCutoff,
                collectionStart: collectionStart,
                firstBatchDate: firstBatchDate
            };
        }

        function formatDate(date) {
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
        }

        function calculateDaysRemaining(targetDate) {
            const today = new Date();
            const diffTime = targetDate - today;
            return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        }

        // ========== PUZZLE SYSTEM ==========
        function createPuzzleGrid() {
            try {
                const grid = document.getElementById('puzzleGrid');
                if (!grid) return;
                
                grid.innerHTML = '';
                for (let i = 0; i < 100; i++) {
                    const piece = document.createElement('div');
                    piece.className = 'puzzle-piece';
                    piece.id = `piece-${i}`;
                    grid.appendChild(piece);
                }
            } catch (error) {
                console.error('Puzzle grid creation error:', error);
            }
        }

        function updatePuzzleProgress(percentage) {
            try {
                const pieces = document.querySelectorAll('.puzzle-piece');
                const fillCount = Math.floor(percentage);
                
                pieces.forEach((piece, index) => {
                    piece.className = 'puzzle-piece';
                    if (index < fillCount) {
                        if (percentage >= 110) {
                            piece.classList.add('excellent');
                        } else {
                            piece.classList.add('filled');
                        }
                    }
                });

                const completionElement = document.getElementById('completionPercent');
                if (completionElement) {
                    completionElement.textContent = Math.round(percentage) + '%';
                }
                
                const badge = document.getElementById('pipelineHealthBadge');
                if (badge) {
                    if (percentage >= 110) {
                        badge.textContent = 'EXCELLENT';
                        badge.className = 'health-status health-excellent';
                    } else if (percentage >= 100) {
badge.textContent = 'STRONG';
                        badge.className = 'health-status health-strong';
                    } else if (percentage >= 75) {
                        badge.textContent = 'MODERATE';
                        badge.className = 'health-status health-moderate';
                    } else {
                        badge.textContent = 'WEAK';
                        badge.className = 'health-status health-weak';
                    }
                }
            } catch (error) {
                console.error('Puzzle progress update error:', error);
            }
        }

        // ========== PIPELINE CALCULATIONS ==========
        function calculateRequiredPipeline() {
            const targetEnrollments = dashboardData.targetEnrollments || 100;
            const submissionsNeeded = Math.ceil(targetEnrollments / 0.90 / 0.75);
            const remainingSubmissions = submissionsNeeded - dashboardData.totalSubmitted;
            return Math.ceil(Math.max(0, remainingSubmissions) / 0.60);
        }

        function calculatePipelineHealth() {
            try {
                const required = calculateRequiredPipeline();
                const current = dashboardData.pipelineScheduled;
                const percentage = current > 0 ? (current / required) * 100 : 0;
                
                updatePuzzleProgress(percentage);
                updateTrafficLight(percentage);
                
                // Update display elements
                const elements = {
                    pipelineStrength: document.getElementById('pipelineStrength'),
                    requiredPipeline: document.getElementById('requiredPipeline'),
                    targetAchievement: document.getElementById('targetAchievement'),
                    pipelineStatus: document.getElementById('pipelineStatus'),
                    pipelineScheduled: document.getElementById('pipelineScheduled'),
                    totalSubmitted: document.getElementById('totalSubmitted'),
                    projectedEnrollments: document.getElementById('projectedEnrollments')
                };
                
                if (elements.pipelineStrength) elements.pipelineStrength.textContent = current + ' Assessments';
                if (elements.requiredPipeline) elements.requiredPipeline.textContent = required + ' Assessments';
                if (elements.targetAchievement) elements.targetAchievement.textContent = Math.round(percentage) + '%';
                if (elements.pipelineScheduled) elements.pipelineScheduled.textContent = current;
                if (elements.totalSubmitted) elements.totalSubmitted.textContent = dashboardData.totalSubmitted;
                if (elements.projectedEnrollments) elements.projectedEnrollments.textContent = dashboardData.targetEnrollments;
                
                if (elements.pipelineStatus) {
                    if (percentage >= 110) {
                        elements.pipelineStatus.textContent = 'EXCELLENT';
                        elements.pipelineStatus.className = 'metric-value status-excellent';
                    } else if (percentage >= 100) {
                        elements.pipelineStatus.textContent = 'STRONG';
                        elements.pipelineStatus.className = 'metric-value status-good';
                    } else if (percentage >= 75) {
                        elements.pipelineStatus.textContent = 'MODERATE';
                        elements.pipelineStatus.className = 'metric-value status-warning';
                    } else {
                        elements.pipelineStatus.textContent = 'WEAK';
                        elements.pipelineStatus.className = 'metric-value status-critical';
                    }
                }
            } catch (error) {
                console.error('Pipeline health calculation error:', error);
            }
        }

        function updateTrafficLight(percentage) {
            try {
                const light = document.getElementById('trafficLight');
                const statusText = document.getElementById('paceStatusText');
                
                if (!light || !statusText) return;
                
                light.className = 'traffic-light';
                
                if (percentage >= 100) {
                    light.classList.add('green');
                    statusText.textContent = 'Strong Pipeline';
                } else if (percentage >= 75) {
                    light.classList.add('yellow');
                    statusText.textContent = 'Moderate Pipeline';
                } else {
                    light.classList.add('red');
                    statusText.textContent = 'Weak Pipeline';
                }
            } catch (error) {
                console.error('Traffic light update error:', error);
            }
        }

        // ========== SUBMISSION TRACKER ==========
        function addSubmission() {
            try {
                const date = document.getElementById('submissionDate').value;
                const files = parseInt(document.getElementById('filesSubmitted').value) || 0;
                
                if (!date || files <= 0) {
                    alert('Please enter a valid date and number of files');
                    return;
                }

                dashboardData.totalSubmitted += files;
                dashboardData.submissionHistory.push({ 
                    date, 
                    files, 
                    id: Date.now()
                });
                
                saveDashboardData();
                updateAllCalculations();
                
                document.getElementById('submissionDate').value = new Date().toISOString().split('T')[0];
                document.getElementById('filesSubmitted').value = '';
                
                updateSubmissionTracker();
                alert(`Successfully added ${files} files for ${date}`);
            } catch (error) {
                console.error('Submission addition error:', error);
                alert('Error adding submission. Please try again.');
            }
        }

        function updateSubmissionTracker() {
            try {
                const totalSubmissions = dashboardData.totalSubmitted;
                const targetEnrollments = dashboardData.targetEnrollments || 100;
                const requiredSubmissions = Math.ceil(targetEnrollments / 0.90 / 0.75);
                const remaining = Math.max(0, requiredSubmissions - totalSubmissions);
                const pipelineRequired = Math.ceil(remaining / 0.60);
                const weeklyTarget = remaining > 0 ? Math.ceil(remaining / 2) : 0;
                
                const elements = {
                    totalCycleSubmissions: document.getElementById('totalCycleSubmissions'),
                    remainingNeeded: document.getElementById('remainingNeeded'),
                    pipelineRequired: document.getElementById('pipelineRequired'),
                    weeklyTarget: document.getElementById('weeklyTarget'),
                    alreadySubmitted: document.getElementById('alreadySubmitted'),
                    completionRate: document.getElementById('completionRate'),
                    paceStatus: document.getElementById('paceStatus')
                };
                
                if (elements.totalCycleSubmissions) elements.totalCycleSubmissions.textContent = totalSubmissions;
                if (elements.remainingNeeded) elements.remainingNeeded.textContent = remaining;
                if (elements.pipelineRequired) elements.pipelineRequired.textContent = pipelineRequired + ' Assessments';
                if (elements.weeklyTarget) elements.weeklyTarget.textContent = weeklyTarget + ' Files/Week';
                if (elements.alreadySubmitted) elements.alreadySubmitted.textContent = totalSubmissions + ' files';
                if (elements.completionRate) elements.completionRate.textContent = Math.round((totalSubmissions / requiredSubmissions) * 100) + '% Complete';
                
                if (elements.paceStatus) {
                    const completionRate = (totalSubmissions / requiredSubmissions) * 100;
                    if (completionRate >= 75) {
                        elements.paceStatus.textContent = 'AHEAD OF SCHEDULE';
                        elements.paceStatus.className = 'metric-value status-excellent';
                    } else if (completionRate >= 50) {
                        elements.paceStatus.textContent = 'ON TRACK';
                        elements.paceStatus.className = 'metric-value status-good';
                    } else if (completionRate >= 25) {
                        elements.paceStatus.textContent = 'BEHIND PACE';
                        elements.paceStatus.className = 'metric-value status-warning';
                    } else {
                        elements.paceStatus.textContent = 'STARTING';
                        elements.paceStatus.className = 'metric-value status-critical';
                    }
                }
                
                updateSubmissionHistory();
            } catch (error) {
                console.error('Submission tracker update error:', error);
            }
        }

        function updateSubmissionHistory() {
            try {
                const historyDiv = document.getElementById('submissionHistory');
                if (!historyDiv) return;
                
                historyDiv.innerHTML = '';
                
                if (dashboardData.submissionHistory.length === 0) {
                    historyDiv.innerHTML = '<div style="color:#94a3b8;text-align:center;padding:20px;">No submissions recorded yet</div>';
                    return;
                }
                
                dashboardData.submissionHistory.slice(-10).forEach(entry => {
                    const item = document.createElement('div');
                    item.className = 'metric-row';
                    item.innerHTML = `
                        <span class="metric-label">${new Date(entry.date).toLocaleDateString()}</span>
                        <span class="metric-value">${entry.files} files</span>
                    `;
                    historyDiv.appendChild(item);
                });
            } catch (error) {
                console.error('Submission history update error:', error);
            }
        }

        // ========== TARGET CALCULATIONS ==========
        function updateTargetCalculations() {
            try {
                const enrollmentTarget = parseInt(document.getElementById('enrollmentTarget')?.value) || 100;
                const firstBatchSize = parseInt(document.getElementById('firstBatchSize')?.value) || 0;
                
                const requiredSubmissions = Math.ceil(enrollmentTarget / 0.90 / 0.75);
                const requiredAssessments = Math.ceil(requiredSubmissions / 0.60);
                const remainingSubmissions = Math.max(0, requiredSubmissions - firstBatchSize);
                const weeklyTarget = Math.ceil(remainingSubmissions / 2);
                const dailyTarget = Math.ceil(weeklyTarget / 5);
                
                const elements = {
                    requiredSubmissions: document.getElementById('requiredSubmissions'),
                    requiredAssessments: document.getElementById('requiredAssessments'),
                    remainingSubmissions: document.getElementById('remainingSubmissions'),
                    calculatedWeeklyTarget: document.getElementById('calculatedWeeklyTarget'),
                    calculatedDailyTarget: document.getElementById('calculatedDailyTarget'),
                    batchImpact: document.getElementById('batchImpact')
                };
                
                if (elements.requiredSubmissions) elements.requiredSubmissions.textContent = requiredSubmissions;
                if (elements.requiredAssessments) elements.requiredAssessments.textContent = requiredAssessments;
                if (elements.remainingSubmissions) elements.remainingSubmissions.textContent = remainingSubmissions;
                if (elements.calculatedWeeklyTarget) elements.calculatedWeeklyTarget.textContent = weeklyTarget + ' files/week';
                if (elements.calculatedDailyTarget) elements.calculatedDailyTarget.textContent = dailyTarget + ' files/day';
                
                if (elements.batchImpact) {
                    if (firstBatchSize > 0) {
                        elements.batchImpact.textContent = `${firstBatchSize} files reduce weekly target to ${weeklyTarget}`;
                    } else {
                        elements.batchImpact.textContent = 'Ready to calculate';
                    }
                }
                
                dashboardData.targetEnrollments = enrollmentTarget;
                updateAllCalculations();
            } catch (error) {
                console.error('Target calculations update error:', error);
            }
        }

        // ========== COMMITTEE DISPLAY ==========
        function updateCommitteeDisplay() {
            try {
                const elements = {
                    committeeBH: document.getElementById('committeeBH'),
                    committeeHS: document.getElementById('committeeHS'),
                    committeeMD: document.getElementById('committeeMD'),
                    committeeMR: document.getElementById('committeeMR'),
                    committeeTotal: document.getElementById('committeeTotal'),
                    totalCommitteeReview: document.getElementById('totalCommitteeReview'),
                    scheduledAssessments: document.getElementById('scheduledAssessments'),
                    level1Ready: document.getElementById('level1Ready'),
                    targetEnrollments: document.getElementById('targetEnrollments')
                };
                
                if (elements.committeeBH) elements.committeeBH.textContent = dashboardData.committee.behavioralHealth;
                if (elements.committeeHS) elements.committeeHS.textContent = dashboardData.committee.healthSafety;
                if (elements.committeeMD) elements.committeeMD.textContent = dashboardData.committee.mdReview;
                if (elements.committeeMR) elements.committeeMR.textContent = dashboardData.committee.medicalRecords;
                
                const total = dashboardData.committee.behavioralHealth + 
                             dashboardData.committee.healthSafety + 
                             dashboardData.committee.mdReview + 
                             dashboardData.committee.medicalRecords;
                
                if (elements.committeeTotal) elements.committeeTotal.textContent = total;
                if (elements.totalCommitteeReview) elements.totalCommitteeReview.textContent = total;
                if (elements.scheduledAssessments) elements.scheduledAssessments.textContent = dashboardData.assessments.scheduled;
                if (elements.level1Ready) elements.level1Ready.textContent = dashboardData.assessments.level1Ready;
                if (elements.targetEnrollments) elements.targetEnrollments.textContent = dashboardData.targetEnrollments;
            } catch (error) {
                console.error('Committee display update error:', error);
            }
        }

        // ========== CENSUS MANAGEMENT ==========
        function unlockCensusInputs() {
            const password = prompt('Enter admin password:');
            if (password === ADMIN_PASSWORD) {
                const inputs = ['startingCensus', 'dhcsApprovals', 'completedEnrollments', 'disenrollments'];
                inputs.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) element.disabled = false;
                });
                
                document.getElementById('unlockCensusBtn').style.display = 'none';
                document.getElementById('saveCensusBtn').style.display = 'inline-block';
                
                loadCensusData();
            } else {
                alert('Incorrect password');
            }
        }

        function loadCensusData() {
            try {
                const elements = {
                    startingCensus: document.getElementById('startingCensus'),
                    dhcsApprovals: document.getElementById('dhcsApprovals'),
                    completedEnrollments: document.getElementById('completedEnrollments'),
                    disenrollments: document.getElementById('disenrollments')
                };
                
                if (elements.startingCensus) elements.startingCensus.value = dashboardData.census.starting;
                if (elements.dhcsApprovals) elements.dhcsApprovals.value = dashboardData.census.approvals;
                if (elements.completedEnrollments) elements.completedEnrollments.value = dashboardData.census.enrollments;
                if (elements.disenrollments) elements.disenrollments.value = dashboardData.census.disenrollments;
            } catch (error) {
                console.error('Census data load error:', error);
            }
        }

        function saveCensusData() {
            try {
                dashboardData.census.starting = parseInt(document.getElementById('startingCensus')?.value) || 0;
                dashboardData.census.approvals = parseInt(document.getElementById('dhcsApprovals')?.value) || 0;
                dashboardData.census.enrollments = parseInt(document.getElementById('completedEnrollments')?.value) || 0;
                dashboardData.census.disenrollments = parseInt(document.getElementById('disenrollments')?.value) || 0;
                
                saveDashboardData();
                updateCensusDisplay();
                alert('Census data saved successfully!');
            } catch (error) {
                console.error('Census data save error:', error);
                alert('Error saving census data. Please try again.');
            }
        }

        function updateCensusDisplay() {
            try {
                const totalCensus = dashboardData.census.starting + dashboardData.census.enrollments - dashboardData.census.disenrollments;
                const monthToDateNet = dashboardData.census.enrollments - dashboardData.census.disenrollments;
                const goalOf5470 = 5470;
                const remaining = goalOf5470 - totalCensus;
                const yearEndDate = new Date(new Date().getFullYear(), 11, 31);
                const daysToYearEnd = Math.ceil((yearEndDate - new Date()) / (1000 * 60 * 60 * 24));
                const projectedYearEnd = totalCensus + (monthToDateNet * 12); // Simple projection
                
                const elements = {
                    totalCensus: document.getElementById('totalCensus'),
                    monthToDateNet: document.getElementById('monthToDateNet'),
                    projectedYearEnd: document.getElementById('projectedYearEnd'),
                    rollingAverage: document.getElementById('rollingAverage'),
                    daysToGoal: document.getElementById('daysToGoal'),
                    requiredDailyRate: document.getElementById('requiredDailyRate'),
                    paceVsTarget: document.getElementById('paceVsTarget')
                };
                
                if (elements.totalCensus) elements.totalCensus.textContent = totalCensus.toLocaleString();
                if (elements.monthToDateNet) elements.monthToDateNet.textContent = monthToDateNet > 0 ? '+' + monthToDateNet : monthToDateNet;
                if (elements.projectedYearEnd) elements.projectedYearEnd.textContent = projectedYearEnd.toLocaleString();
                if (elements.rollingAverage) elements.rollingAverage.textContent = '+' + (monthToDateNet / 30).toFixed(1) + '/day';
                if (elements.daysToGoal) elements.daysToGoal.textContent = daysToYearEnd + ' days';
                if (elements.requiredDailyRate) elements.requiredDailyRate.textContent = '+' + (remaining / daysToYearEnd).toFixed(1) + '/day';
                if (elements.paceVsTarget) {
                    const currentRate = monthToDateNet / 30;
                    const requiredRate = remaining / daysToYearEnd;
                    elements.paceVsTarget.textContent = currentRate >= requiredRate ? 'On Track' : 'Behind Pace';
                    elements.paceVsTarget.className = 'metric-value ' + (currentRate >= requiredRate ? 'status-good' : 'status-warning');
                }
                
                updateCensusCharts();
            } catch (error) {
                console.error('Census display update error:', error);
            }
        }

        function updateCensusCharts() {
            try {
                // Update charts if Chart.js elements exist
                const trendChart = document.getElementById('censusTrendChart');
                const goalChart = document.getElementById('censusGoalChart');
                const netChart = document.getElementById('monthlyNetChart');
                
                if (trendChart && typeof Chart !== 'undefined') {
                    // Create simple trend chart
                    const ctx = trendChart.getContext('2d');
                    if (window.censusTrendChartInstance) {
                        window.censusTrendChartInstance.destroy();
                    }
                    
                    window.censusTrendChartInstance = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                            datasets: [{
                                label: 'Census Trend',
                                data: [5200, 5210, 5225, 5240, 5255, 5270, 5285, 5300, 5315, 5330, 5345, 5360],
                                borderColor: '#3b82f6',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                tension: 0.1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false
                        }
                    });
                }
                
                if (goalChart && typeof Chart !== 'undefined') {
                    // Create goal progress chart
                    const ctx2 = goalChart.getContext('2d');
                    if (window.censusGoalChartInstance) {
                        window.censusGoalChartInstance.destroy();
                    }
                    
                    const totalCensus = dashboardData.census.starting + dashboardData.census.enrollments - dashboardData.census.disenrollments;
                    const percentOfGoal = (totalCensus / 5470) * 100;
                    
                    window.censusGoalChartInstance = new Chart(ctx2, {
                        type: 'doughnut',
                        data: {
                            labels: ['Achieved', 'Remaining'],
                            datasets: [{
                                data: [percentOfGoal, 100 - percentOfGoal],
                                backgroundColor: ['#10b981', '#e2e8f0']
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            cutout: '70%'
                        }
                    });
                }
            } catch (error) {
                console.error('Census charts update error:', error);
            }
        }

        // ========== ADMIN CONTROLS ==========
        function unlockAdminInputs() {
            const password = prompt('Enter admin password:');
            if (password === ADMIN_PASSWORD) {
                const inputs = ['adminPipelineScheduled', 'adminDhcsApprovals', 'adminPendingEnrollments', 'adminConversionRate', 'adminCommitteeBH', 'adminCommitteeHS', 'adminCommitteeMD', 'adminCommitteeMR'];
                inputs.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) element.disabled = false;
                });
                
                document.getElementById('unlockAdminBtn').style.display = 'none';
                document.getElementById('saveAdminBtn').style.display = 'inline-block';
                
                loadAdminData();
            } else {
                alert('Incorrect password');
            }
        }

        function loadAdminData() {
            try {
                const elements = {
                    adminPipelineScheduled: document.getElementById('adminPipelineScheduled'),
                    adminDhcsApprovals: document.getElementById('adminDhcsApprovals'),
                    adminPendingEnrollments: document.getElementById('adminPendingEnrollments'),
                    adminConversionRate: document.getElementById('adminConversionRate'),
                    adminCommitteeBH: document.getElementById('adminCommitteeBH'),
                    adminCommitteeHS: document.getElementById('adminCommitteeHS'),
                    adminCommitteeMD: document.getElementById('adminCommitteeMD'),
                    adminCommitteeMR: document.getElementById('adminCommitteeMR')
                };
                
                if (elements.adminPipelineScheduled) elements.adminPipelineScheduled.value = dashboardData.pipelineScheduled;
                if (elements.adminDhcsApprovals) elements.adminDhcsApprovals.value = dashboardData.census.approvals;
                if (elements.adminPendingEnrollments) elements.adminPendingEnrollments.value = dashboardData.census.enrollments;
                if (elements.adminConversionRate) elements.adminConversionRate.value = 85;
                if (elements.adminCommitteeBH) elements.adminCommitteeBH.value = dashboardData.committee.behavioralHealth;
                if (elements.adminCommitteeHS) elements.adminCommitteeHS.value = dashboardData.committee.healthSafety;
                if (elements.adminCommitteeMD) elements.adminCommitteeMD.value = dashboardData.committee.mdReview;
                if (elements.adminCommitteeMR) elements.adminCommitteeMR.value = dashboardData.committee.medicalRecords;
            } catch (error) {
                console.error('Admin data load error:', error);
            }
        }

        function saveAdminData() {
            try {
                dashboardData.pipelineScheduled = parseInt(document.getElementById('adminPipelineScheduled')?.value) || 248;
                dashboardData.census.approvals = parseInt(document.getElementById('adminDhcsApprovals')?.value) || 0;
                dashboardData.census.enrollments = parseInt(document.getElementById('adminPendingEnrollments')?.value) || 0;
                dashboardData.committee.behavioralHealth = parseInt(document.getElementById('adminCommitteeBH')?.value) || 7;
                dashboardData.committee.healthSafety = parseInt(document.getElementById('adminCommitteeHS')?.value) || 1;
                dashboardData.committee.mdReview = parseInt(document.getElementById('adminCommitteeMD')?.value) || 6;
                dashboardData.committee.medicalRecords = parseInt(document.getElementById('adminCommitteeMR')?.value) || 23;
                
                saveDashboardData();
                updateAllCalculations();
                updateCommitteeDisplay();
                alert('Admin data saved successfully!');
            } catch (error) {
                console.error('Admin data save error:', error);
                alert('Error saving admin data. Please try again.');
            }
        }

        // ========== DATE CALCULATIONS ==========
        function updateDateCalculations() {
            try {
                const cycle = findCurrentCycle();
                if (!cycle) return;
                
                const elements = {
                    collectionWindow: document.getElementById('collectionWindow'),
                    daysRemaining: document.getElementById('daysRemaining'),
                    internalCutoff: document.getElementById('internalCutoff'),
                    dhcsDeadline: document.getElementById('dhcsDeadline'),
                    calendarCollectionWindow: document.getElementById('calendarCollectionWindow'),
                    calendarDaysRemaining: document.getElementById('calendarDaysRemaining'),
                    calendarInternalCutoff: document.getElementById('calendarInternalCutoff'),
                    calendarDhcsDeadline: document.getElementById('calendarDhcsDeadline'),
                    calendarFirstBatch: document.getElementById('calendarFirstBatch'),
                    activeCountdown: document.getElementById('activeCountdown'),
                    activeCapMonth: document.getElementById('activeCapMonth'),
                    activeCollectionWindow: document.getElementById('activeCollectionWindow'),
                    activeInternalCutoff: document.getElementById('activeInternalCutoff'),
                    activeDhcsDeadline: document.getElementById('activeDhcsDeadline'),
                    firstBatchDate: document.getElementById('firstBatchDate'),
                    targetCountdown: document.getElementById('targetCountdown')
                };
                
                const collectionWindowText = `${formatDate(cycle.collectionStart)} - ${formatDate(cycle.internalCutoff)}`;
                const daysRemainingCount = calculateDaysRemaining(cycle.internalCutoff);
                
                if (elements.collectionWindow) elements.collectionWindow.textContent = collectionWindowText;
                if (elements.daysRemaining) elements.daysRemaining.textContent = daysRemainingCount + ' days';
                if (elements.internalCutoff) elements.internalCutoff.textContent = formatDate(cycle.internalCutoff);
                if (elements.dhcsDeadline) elements.dhcsDeadline.textContent = formatDate(cycle.dhcsDeadline);
                if (elements.calendarCollectionWindow) elements.calendarCollectionWindow.textContent = collectionWindowText;
                if (elements.calendarDaysRemaining) elements.calendarDaysRemaining.textContent = daysRemainingCount + ' days';
                if (elements.calendarInternalCutoff) elements.calendarInternalCutoff.textContent = formatDate(cycle.internalCutoff);
                if (elements.calendarDhcsDeadline) elements.calendarDhcsDeadline.textContent = formatDate(cycle.dhcsDeadline);
                if (elements.calendarFirstBatch) elements.calendarFirstBatch.textContent = formatDate(cycle.firstBatchDate);
                if (elements.activeCountdown) elements.activeCountdown.textContent = daysRemainingCount + ' Days';
                if (elements.activeCapMonth) elements.activeCapMonth.textContent = cycle.dhcsDeadline.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
                if (elements.activeCollectionWindow) elements.activeCollectionWindow.textContent = collectionWindowText;
                if (elements.activeInternalCutoff) elements.activeInternalCutoff.textContent = formatDate(cycle.internalCutoff);
                if (elements.activeDhcsDeadline) elements.activeDhcsDeadline.textContent = formatDate(cycle.dhcsDeadline);
                if (elements.firstBatchDate) elements.firstBatchDate.textContent = formatDate(cycle.firstBatchDate);
                if (elements.targetCountdown) elements.targetCountdown.textContent = daysRemainingCount + ' days';
            } catch (error) {
                console.error('Date calculations update error:', error);
            }
        }

        // ========== CONNECTION STATUS ==========
        function updateConnectionStatus() {
            try {
                const statusElement = document.getElementById('connectionStatus');
                const syncIndicator = document.getElementById('syncIndicator');
                const lastUpdateElement = document.getElementById('lastUpdate');
                
                if (statusElement) statusElement.textContent = 'Connected - Internal Data';
                if (syncIndicator) syncIndicator.className = 'sync-indicator';
                if (lastUpdateElement) lastUpdateElement.textContent = new Date().toLocaleTimeString();
            } catch (error) {
                console.error('Connection status update error:', error);
            }
        }

        function refreshData() {
            try {
                const refreshBtn = document.getElementById('refreshBtn');
                if (refreshBtn) {
                    refreshBtn.classList.add('loading');
                    refreshBtn.textContent = '🔄 Refreshing...';
                }
                
                setTimeout(() => {
                    updateAllCalculations();
                    updateCommitteeDisplay();
                    updateCensusDisplay();
                    updateConnectionStatus();
                    updateDateCalculations();
                    
                    if (refreshBtn) {
                        refreshBtn.classList.remove('loading');
                        refreshBtn.textContent = '🔄 Refresh Data';
                    }
                }, 1000);
            } catch (error) {
                console.error('Data refresh error:', error);
            }
        }

        // ========== INCENTIVE TIERS ==========
        function updateIncentiveTiers() {
            try {
                const currentEnrollments = dashboardData.census.enrollments || 0;
                const tiers = [
                    { number: 1, target: 100, reward: 100 },
                    { number: 2, target: 110, reward: 200 },
                    { number: 3, target: 120, reward: 350 },
                    { number: 4, target: 130, reward: 500 },
                    { number: 5, target: 140, reward: 650 },
                    { number: 6, target: 150, reward: 800 }
                ];
let currentTier = 0;
                let nextTierTarget = 100;
                
                for (let i = 0; i < tiers.length; i++) {
                    const tierCard = document.getElementById(`tier${i + 1}`);
                    if (tierCard) {
                        tierCard.className = 'tier-card';
                        if (currentEnrollments >= tiers[i].target) {
                            tierCard.classList.add('achieved');
                            currentTier = i + 1;
                        } else if (nextTierTarget === tiers[i].target) {
                            tierCard.classList.add('current');
                            nextTierTarget = tiers[i].target;
                        } else {
                            tierCard.classList.add('locked');
                        }
                    }
                }
                
                const elements = {
                    currentEnrollments: document.getElementById('currentEnrollments'),
                    currentTier: document.getElementById('currentTier'),
                    nextTierTarget: document.getElementById('nextTierTarget'),
                    tierProbability: document.getElementById('tierProbability'),
                    recommendedTier: document.getElementById('recommendedTier'),
                    dailyPaceNeeded: document.getElementById('dailyPaceNeeded'),
                    incentiveDaysRemaining: document.getElementById('incentiveDaysRemaining'),
                    stretchGoal: document.getElementById('stretchGoal')
                };
                
                if (elements.currentEnrollments) elements.currentEnrollments.textContent = currentEnrollments;
                if (elements.currentTier) elements.currentTier.textContent = currentTier > 0 ? `Tier ${currentTier}` : 'Starting';
                if (elements.nextTierTarget) elements.nextTierTarget.textContent = `${nextTierTarget} (+${nextTierTarget - currentEnrollments} needed)`;
                
                const cycle = findCurrentCycle();
                const daysRemaining = cycle ? calculateDaysRemaining(cycle.dhcsDeadline) : 30;
                const dailyPaceNeeded = (nextTierTarget - currentEnrollments) / daysRemaining;
                
                if (elements.tierProbability) elements.tierProbability.textContent = dailyPaceNeeded <= 3 ? 'High (85%)' : dailyPaceNeeded <= 5 ? 'Medium (60%)' : 'Low (25%)';
                if (elements.recommendedTier) elements.recommendedTier.textContent = `Tier ${Math.min(currentTier + 1, 6)} ($${tiers[Math.min(currentTier, 5)].reward})`;
                if (elements.dailyPaceNeeded) elements.dailyPaceNeeded.textContent = `+${dailyPaceNeeded.toFixed(1)}/day`;
                if (elements.incentiveDaysRemaining) elements.incentiveDaysRemaining.textContent = `${daysRemaining} days`;
                if (elements.stretchGoal) elements.stretchGoal.textContent = currentTier < 5 ? `Consider Tier ${currentTier + 2}` : 'Max Tier Achieved!';
                
            } catch (error) {
                console.error('Incentive tiers update error:', error);
            }
        }

        // ========== INITIALIZE DASHBOARD ==========
        function initializeDashboard() {
            try {
                createPuzzleGrid();
                updateAllCalculations();
                updateCommitteeDisplay();
                updateCensusDisplay();
                updateIncentiveTiers();
                updateDateCalculations();
                updateConnectionStatus();
                setCurrentDate();
                
                // Set up event listeners
                const enrollmentTargetInput = document.getElementById('enrollmentTarget');
                const firstBatchSizeInput = document.getElementById('firstBatchSize');
                
                if (enrollmentTargetInput) {
                    enrollmentTargetInput.addEventListener('input', updateTargetCalculations);
                }
                if (firstBatchSizeInput) {
                    firstBatchSizeInput.addEventListener('input', updateTargetCalculations);
                }
                
                // Update calculations initially
                updateTargetCalculations();
                
                // Set up periodic updates
                setInterval(() => {
                    updateDateCalculations();
                    updateConnectionStatus();
                }, 60000); // Update every minute
                
            } catch (error) {
                console.error('Dashboard initialization error:', error);
            }
        }

        function setCurrentDate() {
            try {
                const dateInput = document.getElementById('submissionDate');
                if (dateInput) {
                    const today = new Date();
                    const dateString = today.toISOString().split('T')[0];
                    dateInput.value = dateString;
                }
            } catch (error) {
                console.error('Date setting error:', error);
            }
        }

        function updateAllCalculations() {
            try {
                calculatePipelineHealth();
                updateSubmissionTracker();
                updateCommitteeDisplay();
                updateIncentiveTiers();
            } catch (error) {
                console.error('All calculations update error:', error);
            }
        }

        // ========== ERROR HANDLING ==========
        window.addEventListener('error', function(e) {
            console.error('Global error:', e.error);
        });

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Dashboard will initialize after password check
        });
    </script>
</body>
</html>
